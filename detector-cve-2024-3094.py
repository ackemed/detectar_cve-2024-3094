#!/usr/bin/env python3

import os
import subprocess
import pyfiglet

GREEN = '\033[1;32m'
RED = '\033[1;31m'
NC = '\033[0m'
banner = pyfiglet.figlet_format("ACKEMED")

print(f"""{GREEN}
{banner}

CVE-2024-3094 detector modified by Bruno Campos
{NC}""")

malicious_xz = 0

# 1. Check XZ version
if os.path.exists('/etc/alpine-release'):
    # Running on Alpine - vulnerable versions are knowns: 5.6.1-r0 and 5.6.1-r1
    process = subprocess.Popen(['apk', 'info', '--installed', '-v', 'xz'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    xz_version, _ = process.communicate()
    xz_version = xz_version.decode().strip()
    if xz_version in ['xz-5.6.1-r0', 'xz-5.6.1-r1']:
        malicious_xz = 1
else:
    # Not Alpine - Check if xz version is >= 5.5.0
    process = subprocess.Popen(['strings', subprocess.check_output(['which', 'xz']).decode().strip()], stdout=subprocess.PIPE)
    xz_version = subprocess.check_output(['awk', '/xz \(XZ Utils/ {print $4}'], stdin=process.stdout).decode().strip()
    process.wait()
    xz_version_parts = xz_version.split('.')
    if int(xz_version_parts[0]) >= 5 and int(xz_version_parts[1]) >= 5:
        malicious_xz = 1

# 2. Check if sshd binary is present
sshd_path = subprocess.run(['which', 'sshd'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
sshd_path = sshd_path.stdout.decode().strip()
sshd_found = 1 if sshd_path else 0

# 3. Check if sshd is using lzma
lzma_used = subprocess.run(['ldd', sshd_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
lzma_used = subprocess.run(['grep', '-q', 'lzma'], input=lzma_used.stdout, stderr=subprocess.PIPE)
lzma_found = 1 if lzma_used.returncode == 0 else 0

lzma_path = None
if lzma_found:
    lzma_path_process = subprocess.Popen(['ldd', sshd_path], stdout=subprocess.PIPE)
    grep_process = subprocess.Popen(['grep', 'lzma'], stdin=lzma_path_process.stdout, stdout=subprocess.PIPE)
    lzma_path = subprocess.check_output(['awk', '{print $3}'], stdin=grep_process.stdout).decode().strip()

# 4. Check for the specific byte pattern in lzma
byte_pattern_found = 0
if lzma_path:
    with open(lzma_path, 'rb') as file:
        byte_pattern = file.read()
        if b'\xf3\x0f\x1e\xfaUH\x89\xf5L\x89\xceS\x89\xfb\x81\xe7\x00\x00\x00\x80H\x83\xec(\x48\x89T$\x18H\x89L$\x10' in byte_pattern:
            byte_pattern_found = 1

# Output results
print("XZ vulnerable version:", end=' ')
if malicious_xz:
    print(f"{RED}YES{NC} ({xz_version})")
else:
    print(f"{GREEN}NO{NC} ({xz_version})")

print("LZMA vulnerable version:", end=' ')
if byte_pattern_found:
    print(f"{RED}YES{NC} (byte pattern found)")
else:
    print(f"{GREEN}NO{NC}")

print("SSHD found in the system:", end=' ')
if sshd_found:
    print(f"{RED}YES{NC} ({sshd_path})")
else:
    print(f"{GREEN}NO{NC}")

print("SSHD linked with LZMA:", end=' ')
if lzma_found:
    print(f"{RED}YES{NC} ({lzma_path})")
else:
    print(f"{GREEN}NO{NC}")

# Output conclusion
print()
if malicious_xz or byte_pattern_found:
    print(f"{RED}- Malicious XZ/LZMA found: YES {NC}")
    affected = 1
else:
    print(f"{GREEN}- Malicious XZ/LZMA found: NO {NC}")
    affected = 0

if lzma_found:
    print(f"{RED}- Vulnerable SSHD found: YES (SSHD linked with LZMA) {NC}")
    vulnerable = 1
else:
    if not sshd_found:
        print(f"{GREEN}- Vulnerable SSHD found: NO (SSHD not found) {NC}")
    else:
        print(f"{GREEN}- Vulnerable SSHD found: NO (SSHD does not link with LZMA) {NC}")
    vulnerable = 0

if vulnerable and affected:
    print(f"Conclusion: {RED}LIKELY TO BE VULNERABLE TO CVE-2024-3094 {NC}")
else:
    print(f"Conclusion: {GREEN}NOT VULNERABLE TO CVE-2024-3094 {NC}")

